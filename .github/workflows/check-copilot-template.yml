# Automated Version Check and Update for ioBroker Copilot Instructions
# Version: 0.4.0
# This action automatically checks for template updates and creates issues

name: Check ioBroker Copilot Template Version

on:
  schedule:
    # Weekly check optimized for off-peak hours (3:23 AM UTC Sunday)
    - cron: '23 3 * * 0'
  workflow_dispatch:  # Allow manual triggering

jobs:
  check-template:
    runs-on: ubuntu-latest
    permissions:
      issues: write
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Dynamic template version check
        id: version-check
        run: |
          echo "🔍 Starting dynamic ioBroker Copilot template version check..."
          
          # Get current version from local copilot instructions
          if [ -f ".github/copilot-instructions.md" ]; then
            CURRENT_VERSION=$(awk '/Version:|Template Version:/ {match($0, /([0-9]+(\.[0-9]+)*)/, arr); if (arr[1] != "") print arr[1]}' .github/copilot-instructions.md | head -1)
            if [ -z "$CURRENT_VERSION" ]; then CURRENT_VERSION="unknown"; fi
            echo "📋 Current local version: $CURRENT_VERSION"
          else
            CURRENT_VERSION="none"
            echo "❌ No .github/copilot-instructions.md file found"
          fi
          
          # Get latest version from centralized metadata
          echo "🌐 Fetching latest template version from centralized config..."
          LATEST_VERSION=$(curl -s https://raw.githubusercontent.com/DrozmotiX/ioBroker-Copilot-Instructions/main/config/metadata.json | jq -r '.version' 2>/dev/null || echo "unknown")
          if [ -z "$LATEST_VERSION" ] || [ "$LATEST_VERSION" = "null" ]; then
            LATEST_VERSION="unknown"
          fi
          echo "📋 Latest available version: $LATEST_VERSION"
          
          # Determine repository status
          COPILOT_INITIALIZED="false"
          UPDATE_NEEDED="false"
          REPO_STATUS="unknown"
          
          if [ "$CURRENT_VERSION" = "none" ]; then
            REPO_STATUS="not_initialized"
            echo "⚠️  Repository status: Copilot not initialized (no copilot-instructions.md)"
          elif [ "$CURRENT_VERSION" = "unknown" ] || [ "$LATEST_VERSION" = "unknown" ]; then
            REPO_STATUS="version_check_failed"
            echo "❌ Repository status: Version check failed (unable to determine versions)"
          else
            COPILOT_INITIALIZED="true"
            if [ "$CURRENT_VERSION" != "$LATEST_VERSION" ]; then
              UPDATE_NEEDED="true"
              REPO_STATUS="needs_update"
              echo "🔄 Repository status: Update needed ($CURRENT_VERSION → $LATEST_VERSION)"
            else
              REPO_STATUS="up_to_date"
              echo "✅ Repository status: Up to date ($CURRENT_VERSION)"
            fi
          fi
          
          # Set outputs for next steps
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "latest_version=$LATEST_VERSION" >> $GITHUB_OUTPUT
          echo "copilot_initialized=$COPILOT_INITIALIZED" >> $GITHUB_OUTPUT
          echo "update_needed=$UPDATE_NEEDED" >> $GITHUB_OUTPUT
          echo "repo_status=$REPO_STATUS" >> $GITHUB_OUTPUT
          
      - name: Check for existing issues
        id: existing-issues
        run: |
          echo "🔍 Checking for existing automation issues..."
          
          # Check for setup issues
          SETUP_ISSUE_EXISTS=$(gh issue list --search "🤖 Setup ioBroker GitHub Copilot Instructions" --state open --limit 1 --json number | jq 'length > 0')
          
          # Check for update issues  
          UPDATE_ISSUE_EXISTS=$(gh issue list --search "🔄 Update ioBroker Copilot Template" --state open --limit 1 --json number | jq 'length > 0')
          
          echo "setup_issue_exists=$SETUP_ISSUE_EXISTS" >> $GITHUB_OUTPUT
          echo "update_issue_exists=$UPDATE_ISSUE_EXISTS" >> $GITHUB_OUTPUT
          
          if [ "$SETUP_ISSUE_EXISTS" = "true" ]; then
            echo "📋 Found existing setup issue"
          fi
          if [ "$UPDATE_ISSUE_EXISTS" = "true" ]; then
            echo "📋 Found existing update issue"
          fi
        env:
          GH_TOKEN: ${{ github.token }}
          
      - name: Create setup issue
        if: steps.version-check.outputs.repo_status == 'not_initialized' && steps.existing-issues.outputs.setup_issue_exists == 'false'
        run: |
          echo "🎯 Creating initial setup issue..."
          
          TEMPLATE_URL="https://raw.githubusercontent.com/DrozmotiX/ioBroker-Copilot-Instructions/main/templates/initial-setup-automation.md"
          
          gh issue create \
            --title "🤖 Setup ioBroker GitHub Copilot Instructions" \
            --body "$(curl -s $TEMPLATE_URL)" \
            --label "copilot-setup,automation" \
            --assignee copilot
            
          echo "✅ Setup issue created successfully"
        env:
          GH_TOKEN: ${{ github.token }}
          
      - name: Create update issue
        if: steps.version-check.outputs.repo_status == 'needs_update' && steps.existing-issues.outputs.update_issue_exists == 'false'
        run: |
          echo "🔄 Creating template update issue..."
          
          CURRENT_VERSION="${{ steps.version-check.outputs.current_version }}"
          LATEST_VERSION="${{ steps.version-check.outputs.latest_version }}"
          
          gh issue create \
            --title "🔄 Update ioBroker Copilot Template to v$LATEST_VERSION" \
            --body "## 🔄 Automated Template Update Detection

**Current Version:** $CURRENT_VERSION  
**Latest Version:** $LATEST_VERSION

**GitHub Copilot**: Please update the GitHub Copilot instructions template in this repository.

### 📋 Update Process

**Configuration Reference**: https://raw.githubusercontent.com/DrozmotiX/ioBroker-Copilot-Instructions/main/config/automation-setup.yml

1. **Template Update**
   - [ ] Fetch latest template from: https://raw.githubusercontent.com/DrozmotiX/ioBroker-Copilot-Instructions/main/template.md
   - [ ] Update \`.github/copilot-instructions.md\` with new template content
   - [ ] Update version number to \`$LATEST_VERSION\`
   - [ ] Preserve all \`[CUSTOMIZE]\` sections with existing content
   - [ ] Remove template comment block

2. **Validation**
   - [ ] Verify template functionality with GitHub Copilot suggestions
   - [ ] Ensure no duplicate content between custom and template sections
   - [ ] Confirm version tracking is accurate

### 🚨 Critical Requirements

- **Preserve Customizations**: All \`[CUSTOMIZE]\` sections must retain existing adapter-specific content
- **Version Update**: Template version must be updated to \`$LATEST_VERSION\`
- **No Package.json Changes**: Version should NOT be stored in package.json
- **Template Source**: Maintain reference to template source repository

**Template Repository**: https://github.com/DrozmotiX/ioBroker-Copilot-Instructions  
**Metadata Source**: https://raw.githubusercontent.com/DrozmotiX/ioBroker-Copilot-Instructions/main/config/metadata.json  
**Configuration**: https://raw.githubusercontent.com/DrozmotiX/ioBroker-Copilot-Instructions/main/config/automation-setup.yml" \
            --label "template-update,automation" \
            --assignee copilot
            
          echo "✅ Update issue created successfully"
        env:
          GH_TOKEN: ${{ github.token }}
          
      - name: Report status
        run: |
          echo "📊 Automation Status Summary:"
          echo "  Repository Status: ${{ steps.version-check.outputs.repo_status }}"
          echo "  Current Version: ${{ steps.version-check.outputs.current_version }}"
          echo "  Latest Version: ${{ steps.version-check.outputs.latest_version }}"
          echo "  Copilot Initialized: ${{ steps.version-check.outputs.copilot_initialized }}"
          echo "  Update Needed: ${{ steps.version-check.outputs.update_needed }}"
          
          case "${{ steps.version-check.outputs.repo_status }}" in
            "up_to_date")
              echo "✅ No action needed - template is up to date"
              ;;
            "not_initialized")
              if [ "${{ steps.existing-issues.outputs.setup_issue_exists }}" = "true" ]; then
                echo "📋 Setup required - existing issue found"
              else
                echo "🎯 Setup required - issue created"
              fi
              ;;
            "needs_update")
              if [ "${{ steps.existing-issues.outputs.update_issue_exists }}" = "true" ]; then
                echo "🔄 Update required - existing issue found"
              else
                echo "🔄 Update required - issue created" 
              fi
              ;;
            "version_check_failed")
              echo "❌ Version check failed - manual investigation needed"
              ;;
            *)
              echo "❓ Unknown status - manual investigation needed"
              ;;
          esac